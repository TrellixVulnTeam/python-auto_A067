1.
在引用同目录的文件时，pycharm不会将当前文件目录自动加入自己的sourse_path。右键make_directory as-->Sources Root将当前工作的文件夹加入source_path就可以了。

2.
在第一行给出了每一个用例执行的结果的标识，成功是 .，失败是 F，出错是 E，跳过是 S。测试的执行跟方法的顺序没有关系
每个测试方法均以 test 开头，否则是不被unittest识别的。
在unittest.main()中加 verbosity 参数可以控制输出的错误报告的详细程度，默认是 1，如果设为 0，则不输出每一用例的执行结果，即没有上面的结果中的第1行；如果设为 2，则输出详细的执行结果
eg:unittest.main(verbosity=2)

3.
写好TestCase，然后由TestLoader加载TestCase到TestSuite，
然后由TextTestRunner来运行TestSuite，
运行的结果保存在TextTestResult中，
我们通过命令行或者unittest.main()执行时，main会调用TextTestRunner中的run来执行，
或者我们可以直接通过TextTestRunner来执行用例。
这里加个说明，在Runner执行时，默认将执行结果输出到控制台，我们可以设置其输出到文件，在文件中查看结果（你可能听说过HTMLTestRunner，是的，通过它可以将结果输出到HTML中，生成漂亮的报告，它跟TextTestRunner是一样的，从名字就能看出来，这个我们后面再说）

此种流程的日志是输出在控制台的：
TestCase(自定义类继承unittest.TestCase)  ---->  获取TestSuite对象(unittest.TestSuite) ----> 将所有的TestCase封装到一个list中 ----> suite.addTests(list) ---->
获取TextTestRunner对象（unittest.TextTestRunner）----> runner.run(suite)

若想日志输出到某一个txt文件中：
TestCase(自定义类继承unittest.TestCase)  ---->  获取TestSuite对象(unittest.TestSuite) ----> 将所有的TestCase封装到一个list中 ----> suite.addTests(list) ---->
打开一个文件（with open('*.txt','a') as f ）----> 获取TextTestRunner对象,并将f给到stream属性（unittest.TextTestRunner（stream=f,verbosity=2））----> runner.run(suite)


unittest是Python自带的单元测试框架，我们可以用其来作为我们自动化测试框架的用例组织执行框架。
unittest的流程：
写好TestCase，然后由TestLoader加载TestCase到TestSuite，然后由TextTestRunner来运行TestSuite，运行的结果保存在TextTestResult中，
我们通过命令行或者unittest.main()执行时，main会调用TextTestRunner中的run来执行，或者我们可以直接通过TextTestRunner来执行用例。
一个class继承unittest.TestCase即是一个TestCase，其中以 test 开头的方法在load时被加载为一个真正的TestCase。
verbosity参数可以控制执行结果的输出，0 是简单报告、1 是一般报告、2 是详细报告。
可以通过addTest和addTests向suite中添加case或suite，可以用TestLoader的loadTestsFrom__()方法。
用 setUp()、tearDown()、setUpClass()以及 tearDownClass()可以在用例执行前布置环境，以及在用例执行后清理环境
我们可以通过skip，skipIf，skipUnless装饰器跳过某个case，或者用TestCase.skipTest方法。
参数中加stream，可以将报告输出到文件：可以用TextTestRunner输出txt报告，以及可以用HTMLTestRunner输出html报告。